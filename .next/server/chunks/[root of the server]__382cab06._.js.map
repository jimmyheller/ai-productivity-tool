{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/pages/api/save-persona.ts"],"sourcesContent":["// pages/api/save-persona.ts\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { getAuth } from '@clerk/nextjs/server';\n\ntype PersonaData = {\n  name: string;\n  age: string;\n  occupation: string;\n  interests: string[];\n  currentProjects: string[];\n  workStyle: string;\n  preferences: Record<string, string>;\n};\n\n// In a real application, you would store this in a database\n// For now, we'll use a simple in-memory store\nconst userPersonaStore: Record<string, PersonaData> = {};\n\nasync function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;\n    const { userId, personaData } = body;\n    \n    if (!personaData) {\n      return res.status(400).json({ error: 'Missing persona data' });\n    }\n\n    if (!userId) {\n      return res.status(400).json({ error: 'Missing user ID' });\n    }\n\n    // Store the persona data with the user's ID\n    userPersonaStore[userId] = personaData;\n    \n    console.log(`[Persona Data Saved for ${userId}]`, personaData);\n\n    // In a real application, you would save this to a database\n    // For example: await db.collection('users').updateOne({ userId }, { $set: { personaData } });\n\n    return res.status(200).json({\n      message: 'Persona data saved successfully',\n      userId,\n    });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error('[SAVE PERSONA ERROR]', error);\n    return res.status(500).json({ error: 'Error saving persona data', details: errorMessage });\n  }\n}\n\n// Function to get persona data by user ID (for use in other API routes)\nexport function getPersonaData(userId: string): PersonaData | null {\n  return userPersonaStore[userId] || null;\n}\n\nexport default handler;\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAc5B,4DAA4D;AAC5D,8CAA8C;AAC9C,MAAM,mBAAgD,CAAC;AAEvD,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC9D,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,IAAI;QACF,MAAM,OAAO,OAAO,IAAI,IAAI,KAAK,WAAW,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;QAC3E,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG;QAEhC,IAAI,CAAC,aAAa;YAChB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAuB;QAC9D;QAEA,IAAI,CAAC,QAAQ;YACX,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAkB;QACzD;QAEA,4CAA4C;QAC5C,gBAAgB,CAAC,OAAO,GAAG;QAE3B,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC,EAAE;QAElD,2DAA2D;QAC3D,8FAA8F;QAE9F,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAC1B,SAAS;YACT;QACF;IACF,EAAE,OAAO,OAAgB;QACvB,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;YAA6B,SAAS;QAAa;IAC1F;AACF;AAGO,SAAS,eAAe,MAAc;IAC3C,OAAO,gBAAgB,CAAC,OAAO,IAAI;AACrC;uCAEe","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/pages/api/create-para-framework.ts"],"sourcesContent":["// pages/api/create-para-framework.ts\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { Client } from '@notionhq/client';\nimport { getPersonaData } from './save-persona';\n\ntype DatabaseIds = {\n  projects: string;\n  areas: string;\n  resources: string;\n  archive: string;\n};\n\nasync function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    const body = typeof req.body === 'string' ? JSON.parse(req.body) : req.body;\n    const { notionToken, userId } = body;\n    \n    if (!notionToken) {\n      return res.status(400).json({ error: 'Missing Notion token' });\n    }\n\n    if (!userId) {\n      return res.status(400).json({ error: 'Missing user ID' });\n    }\n\n    // Initialize Notion client with the provided token\n    const notion = new Client({ auth: notionToken });\n\n    // Get the user's persona data to personalize the PARA framework\n    const personaData = getPersonaData(userId);\n\n    console.log(`[Creating PARA Framework for ${userId}]`);\n\n    // Create the PARA framework databases\n    const databaseIds = await createParaFramework(notion, personaData, userId);\n\n    return res.status(200).json({\n      message: 'PARA framework created successfully',\n      databaseIds,\n    });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    console.error('[CREATE PARA FRAMEWORK ERROR]', error);\n    return res.status(500).json({ error: 'Error creating PARA framework', details: errorMessage });\n  }\n}\n\nasync function createParaFramework(\n  notion: Client,\n  personaData: any,\n  userId: string\n): Promise<DatabaseIds> {\n  try {\n    // First, get a valid page ID where we can create databases\n    // We'll search for pages the integration has access to\n    const searchResponse = await notion.search({\n      filter: {\n        property: 'object',\n        value: 'page'\n      }\n    });\n    \n    if (searchResponse.results.length === 0) {\n      throw new Error('No pages found. Please make sure the integration has access to at least one page in your Notion workspace.');\n    }\n    \n    // Use the first page found as parent\n    const parentPageId = searchResponse.results[0].id;\n    console.log(`Using parent page ID: ${parentPageId}`);\n    \n    // Common database schema for all PARA databases\n    const commonProperties: any = {\n      Name: {\n        title: {}\n      },\n      Status: {\n        select: {\n          options: [\n            { name: 'Not Started', color: 'gray' },\n            { name: 'In Progress', color: 'blue' },\n            { name: 'Completed', color: 'green' },\n            { name: 'On Hold', color: 'orange' }\n          ]\n        }\n      },\n      Priority: {\n        select: {\n          options: [\n            { name: 'Low', color: 'gray' },\n            { name: 'Medium', color: 'yellow' },\n            { name: 'High', color: 'red' }\n          ]\n        }\n      },\n      'Due Date': {\n        date: {}\n      },\n      Notes: {\n        rich_text: {}\n      },\n      UserId: {\n        rich_text: {}\n      }\n    };\n\n    // Create Projects database\n    const projectsDb = await notion.databases.create({\n      parent: {\n        type: 'page_id',\n        page_id: parentPageId\n      },\n      title: [\n        {\n          type: 'text',\n          text: { content: 'PARA - Projects' }\n        }\n      ],\n      properties: {\n        ...commonProperties,\n        'End Date': {\n          date: {}\n        },\n        'Project Owner': {\n          rich_text: {}\n        }\n      }\n    });\n\n    // Create Areas database\n    const areasDb = await notion.databases.create({\n      parent: {\n        type: 'page_id',\n        page_id: parentPageId\n      },\n      title: [\n        {\n          type: 'text',\n          text: { content: 'PARA - Areas' }\n        }\n      ],\n      properties: {\n        ...commonProperties,\n        'Responsibility': {\n          rich_text: {}\n        }\n      }\n    });\n\n    // Create Resources database\n    const resourcesDb = await notion.databases.create({\n      parent: {\n        type: 'page_id',\n        page_id: parentPageId\n      },\n      title: [\n        {\n          type: 'text',\n          text: { content: 'PARA - Resources' }\n        }\n      ],\n      properties: {\n        ...commonProperties,\n        'Category': {\n          select: {\n            options: [\n              { name: 'Article', color: 'blue' },\n              { name: 'Book', color: 'green' },\n              { name: 'Course', color: 'orange' },\n              { name: 'Video', color: 'red' },\n              { name: 'Podcast', color: 'purple' },\n              { name: 'Other', color: 'gray' }\n            ]\n          }\n        },\n        'URL': {\n          url: {}\n        }\n      }\n    });\n\n    // Create Archive database\n    const archiveDb = await notion.databases.create({\n      parent: {\n        type: 'page_id',\n        page_id: parentPageId\n      },\n      title: [\n        {\n          type: 'text',\n          text: { content: 'PARA - Archive' }\n        }\n      ],\n      properties: {\n        ...commonProperties,\n        'Original Category': {\n          select: {\n            options: [\n              { name: 'Project', color: 'blue' },\n              { name: 'Area', color: 'green' },\n              { name: 'Resource', color: 'orange' }\n            ]\n          }\n        },\n        'Archived Date': {\n          date: {}\n        }\n      }\n    });\n\n    // Populate with initial data based on persona if available\n    if (personaData) {\n      await populateInitialData(notion, {\n        projects: projectsDb.id,\n        areas: areasDb.id,\n        resources: resourcesDb.id,\n        archive: archiveDb.id\n      }, personaData, userId);\n    }\n\n    return {\n      projects: projectsDb.id,\n      areas: areasDb.id,\n      resources: resourcesDb.id,\n      archive: archiveDb.id\n    };\n  } catch (error) {\n    console.error('Error creating PARA framework:', error);\n    throw error;\n  }\n}\n\nasync function populateInitialData(\n  notion: Client,\n  databaseIds: DatabaseIds,\n  personaData: any,\n  userId: string\n) {\n  // Add current projects from persona data to Projects database\n  if (personaData.currentProjects && Array.isArray(personaData.currentProjects)) {\n    for (const project of personaData.currentProjects) {\n      await notion.pages.create({\n        parent: { database_id: databaseIds.projects },\n        properties: {\n          Name: {\n            title: [{ text: { content: project } }]\n          },\n          Status: {\n            select: { name: 'Not Started' }\n          },\n          Priority: {\n            select: { name: 'Medium' }\n          },\n          UserId: {\n            rich_text: [{ text: { content: userId } }]\n          }\n        }\n      });\n    }\n  }\n\n  // Add areas based on occupation and interests\n  if (personaData.occupation) {\n    await notion.pages.create({\n      parent: { database_id: databaseIds.areas },\n      properties: {\n        Name: {\n          title: [{ text: { content: 'Work' } }]\n        },\n        Responsibility: {\n          rich_text: [{ text: { content: personaData.occupation } }]\n        },\n        UserId: {\n          rich_text: [{ text: { content: userId } }]\n        }\n      }\n    });\n  }\n\n  // Add standard life areas\n  const standardAreas = ['Health', 'Finances', 'Relationships', 'Personal Development'];\n  for (const area of standardAreas) {\n    await notion.pages.create({\n      parent: { database_id: databaseIds.areas },\n      properties: {\n        Name: {\n          title: [{ text: { content: area } }]\n        },\n        UserId: {\n          rich_text: [{ text: { content: userId } }]\n        }\n      }\n    });\n  }\n\n  // Add resources based on interests\n  if (personaData.interests && Array.isArray(personaData.interests)) {\n    for (const interest of personaData.interests) {\n      await notion.pages.create({\n        parent: { database_id: databaseIds.resources },\n        properties: {\n          Name: {\n            title: [{ text: { content: `Resources on ${interest}` } }]\n          },\n          Category: {\n            select: { name: 'Other' }\n          },\n          UserId: {\n            rich_text: [{ text: { content: userId } }]\n          }\n        }\n      });\n    }\n  }\n}\n\nexport default handler;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 584, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;yMAGzBD,QAAAA,EAAMC,sIAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,sIAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0],"debugId":null}}]
}