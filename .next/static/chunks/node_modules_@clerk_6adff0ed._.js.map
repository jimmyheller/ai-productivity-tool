{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/%40clerk/backend/src/jwt/legacyReturn.ts"],"sourcesContent":["import type { JwtReturnType } from './types';\n\n// TODO(dimkl): Will be probably be dropped in next major version\nexport function withLegacyReturn<T extends (...args: any[]) => Promise<JwtReturnType<any, any>>>(cb: T) {\n  return async (...args: Parameters<T>): Promise<NonNullable<Awaited<ReturnType<T>>['data']>> | never => {\n    const { data, errors } = await cb(...args);\n    if (errors) {\n      throw errors[0];\n    }\n    return data;\n  };\n}\n\n// TODO(dimkl): Will be probably be dropped in next major version\nexport function withLegacySyncReturn<T extends (...args: any[]) => JwtReturnType<any, any>>(cb: T) {\n  return (...args: Parameters<T>): NonNullable<Awaited<ReturnType<T>>['data']> | never => {\n    const { data, errors } = cb(...args);\n    if (errors) {\n      throw errors[0];\n    }\n    return data;\n  };\n}\n"],"names":[],"mappings":";;;;;AAGO,SAAS,iBAAiF,EAAA,EAAO;IACtG,OAAO,OAAA,GAAU,SAAsF;QACrG,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,GAAI,MAAM,GAAG,GAAG,IAAI;QACzC,IAAI,QAAQ;YACV,MAAM,MAAA,CAAO,CAAC,CAAA;QAChB;QACA,OAAO;IACT;AACF;AAGO,SAAS,qBAA4E,EAAA,EAAO;IACjG,OAAO,CAAA,GAAI,SAA6E;QACtF,MAAM,EAAE,IAAA,EAAM,MAAA,CAAO,CAAA,GAAI,GAAG,GAAG,IAAI;QACnC,IAAI,QAAQ;YACV,MAAM,MAAA,CAAO,CAAC,CAAA;QAChB;QACA,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/%40clerk/backend/src/index.ts"],"sourcesContent":["import type { TelemetryCollectorOptions } from '@clerk/shared/telemetry';\nimport { TelemetryCollector } from '@clerk/shared/telemetry';\nimport type { SDKMetadata } from '@clerk/types';\n\nimport type { ApiClient, CreateBackendApiOptions } from './api';\nimport { createBackendApiClient } from './api';\nimport { withLegacyReturn } from './jwt/legacyReturn';\nimport type { CreateAuthenticateRequestOptions } from './tokens/factory';\nimport { createAuthenticateRequest } from './tokens/factory';\nimport { verifyToken as _verifyToken } from './tokens/verify';\n\nexport const verifyToken = withLegacyReturn(_verifyToken);\n\nexport type ClerkOptions = CreateBackendApiOptions &\n  Partial<\n    Pick<\n      CreateAuthenticateRequestOptions['options'],\n      'audience' | 'jwtKey' | 'proxyUrl' | 'secretKey' | 'publishableKey' | 'domain' | 'isSatellite'\n    >\n  > & { sdkMetadata?: SDKMetadata; telemetry?: Pick<TelemetryCollectorOptions, 'disabled' | 'debug'> };\n\n// The current exported type resolves the following issue in packages importing createClerkClient\n// TS4023: Exported variable 'clerkClient' has or is using name 'AuthErrorReason' from external module \"/packages/backend/dist/index\" but cannot be named.\nexport type ClerkClient = {\n  telemetry: TelemetryCollector;\n} & ApiClient &\n  ReturnType<typeof createAuthenticateRequest>;\n\nexport function createClerkClient(options: ClerkOptions): ClerkClient {\n  const opts = { ...options };\n  const apiClient = createBackendApiClient(opts);\n  const requestState = createAuthenticateRequest({ options: opts, apiClient });\n  const telemetry = new TelemetryCollector({\n    ...options.telemetry,\n    publishableKey: opts.publishableKey,\n    secretKey: opts.secretKey,\n    samplingRate: 0.1,\n    ...(opts.sdkMetadata ? { sdk: opts.sdkMetadata.name, sdkVersion: opts.sdkMetadata.version } : {}),\n  });\n\n  return {\n    ...apiClient,\n    ...requestState,\n    telemetry,\n  };\n}\n\n/**\n * General Types\n */\nexport type { OrganizationMembershipRole } from './api/resources';\nexport type { VerifyTokenOptions } from './tokens/verify';\n/**\n * JSON types\n */\nexport type {\n  AccountlessApplicationJSON,\n  ClerkResourceJSON,\n  TokenJSON,\n  AllowlistIdentifierJSON,\n  ClientJSON,\n  EmailJSON,\n  EmailAddressJSON,\n  ExternalAccountJSON,\n  IdentificationLinkJSON,\n  InvitationJSON,\n  OauthAccessTokenJSON,\n  OrganizationJSON,\n  OrganizationDomainJSON,\n  OrganizationDomainVerificationJSON,\n  OrganizationInvitationJSON,\n  PublicOrganizationDataJSON,\n  OrganizationMembershipJSON,\n  OrganizationMembershipPublicUserDataJSON,\n  PhoneNumberJSON,\n  RedirectUrlJSON,\n  SessionJSON,\n  SignInJSON,\n  SignInTokenJSON,\n  SignUpJSON,\n  SMSMessageJSON,\n  UserJSON,\n  VerificationJSON,\n  WaitlistEntryJSON,\n  Web3WalletJSON,\n  DeletedObjectJSON,\n  PaginatedResponseJSON,\n  TestingTokenJSON,\n} from './api/resources/JSON';\n\n/**\n * Resources\n */\nexport type {\n  AccountlessApplication,\n  AllowlistIdentifier,\n  Client,\n  EmailAddress,\n  ExternalAccount,\n  Invitation,\n  OauthAccessToken,\n  Organization,\n  OrganizationDomain,\n  OrganizationDomainVerification,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  Session,\n  SignInToken,\n  SMSMessage,\n  Token,\n  User,\n  TestingToken,\n} from './api/resources';\n\n/**\n * Webhooks event types\n */\nexport type {\n  EmailWebhookEvent,\n  OrganizationWebhookEvent,\n  OrganizationDomainWebhookEvent,\n  OrganizationInvitationWebhookEvent,\n  OrganizationMembershipWebhookEvent,\n  RoleWebhookEvent,\n  PermissionWebhookEvent,\n  SessionWebhookEvent,\n  SMSWebhookEvent,\n  UserWebhookEvent,\n  WaitlistEntryWebhookEvent,\n  WebhookEvent,\n  WebhookEventType,\n} from './api/resources/Webhooks';\n\n/**\n * Auth objects\n */\nexport type { AuthObject } from './tokens/authObjects';\n"],"names":["verifyToken"],"mappings":";;;;;;;;;;;AACA,SAAS,0BAA0B;;;;;;;AAU5B,IAAMA,gLAAc,mBAAA,+JAAiB,cAAY;AAiBjD,SAAS,kBAAkB,OAAA,EAAoC;IACpE,MAAM,OAAO;QAAE,GAAG,OAAA;IAAQ;IAC1B,MAAM,6KAAY,yBAAA,EAAuB,IAAI;IAC7C,MAAM,gLAAe,4BAAA,EAA0B;QAAE,SAAS;QAAM;IAAU,CAAC;IAC3E,MAAM,YAAY,+JAAI,sBAAA,CAAmB;QACvC,GAAG,QAAQ,SAAA;QACX,gBAAgB,KAAK,cAAA;QACrB,WAAW,KAAK,SAAA;QAChB,cAAc;QACd,GAAI,KAAK,WAAA,GAAc;YAAE,KAAK,KAAK,WAAA,CAAY,IAAA;YAAM,YAAY,KAAK,WAAA,CAAY,OAAA;QAAQ,IAAI,CAAC,CAAA;IACjG,CAAC;IAED,OAAO;QACL,GAAG,SAAA;QACH,GAAG,YAAA;QACH;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/%40clerk/nextjs/src/server/createClerkClient.ts"],"sourcesContent":["import { createClerkClient } from '@clerk/backend';\n\nimport {\n  API_URL,\n  API_VERSION,\n  DOMAIN,\n  IS_SATELLITE,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SDK_METADATA,\n  SECRET_KEY,\n  TELEMETRY_DEBUG,\n  TELEMETRY_DISABLED,\n} from './constants';\n\nconst clerkClientDefaultOptions = {\n  secretKey: SECRET_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  proxyUrl: PROXY_URL,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  sdkMetadata: SDK_METADATA,\n  telemetry: {\n    disabled: TELEMETRY_DISABLED,\n    debug: TELEMETRY_DEBUG,\n  },\n};\n\nexport const createClerkClientWithOptions: typeof createClerkClient = options =>\n  createClerkClient({ ...clerkClientDefaultOptions, ...options });\n"],"names":[],"mappings":";;;AAAA,SAAS,yBAAyB;AAElC;;;;AAaA,MAAM,4BAA4B;IAChC,+KAAW,aAAA;IACX,oLAAgB,kBAAA;IAChB,4KAAQ,UAAA;IACR,+KAAY,eAAA;IACZ,WAAW,GAAG,eAAY,CAAA,CAAA,EAAI,QAAe,EAAA;IAC7C,8KAAU,YAAA;IACV,4KAAQ,SAAA;IACR,aAAa,mLAAA;IACb,iLAAa,eAAA;IACb,WAAW;QACT,8KAAU,qBAAA;QACV,2KAAO,kBAAA;IACT;AACF;AAEO,MAAM,+BAAyD,CAAA,+JACpE,oBAAA,EAAkB;QAAE,GAAG,yBAAA;QAA2B,GAAG,OAAA;IAAQ,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/%40clerk/nextjs/src/runtime/browser/safe-node-apis.js"],"sourcesContent":["/**\n * This file is used for conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\nconst fs = undefined;\nconst path = undefined;\nconst cwd = undefined;\n\nmodule.exports = { fs, path, cwd };\n"],"names":[],"mappings":";;;;;AAAA,IAAA,yBAAA,CAAA,GAAA,iKAAA,CAAA,aAAA,EAAA;IAAA,yCAAA,OAAA,EAAA,MAAA;QAGA,MAAM,KAAK,KAAA;QACX,MAAM,OAAO,KAAA;QACb,MAAM,MAAM,KAAA;QAEZ,OAAO,OAAA,GAAU;YAAE;YAAI;YAAM;QAAI;IAAA;AAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/%40clerk/nextjs/src/server/fs/utils.ts"],"sourcesContent":["/**\n * Attention: Only import this module when the node runtime is used.\n * We are using conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\n// @ts-ignore\nimport nodeRuntime from '#safe-node-apis';\n\nconst throwMissingFsModule = (module: string) => {\n  throw new Error(`Clerk: ${module} is missing. This is an internal error. Please contact Clerk's support.`);\n};\n\nconst nodeFsOrThrow = () => {\n  if (!nodeRuntime.fs) {\n    throwMissingFsModule('fs');\n  }\n  return nodeRuntime.fs;\n};\n\nconst nodePathOrThrow = () => {\n  if (!nodeRuntime.path) {\n    throwMissingFsModule('path');\n  }\n  return nodeRuntime.path;\n};\n\nconst nodeCwdOrThrow = () => {\n  if (!nodeRuntime.cwd) {\n    throwMissingFsModule('cwd');\n  }\n  return nodeRuntime.cwd;\n};\n\nexport { nodeCwdOrThrow, nodeFsOrThrow, nodePathOrThrow };\n"],"names":[],"mappings":";;;;;AAKA,OAAO,iBAAiB;;;AAExB,MAAM,uBAAuB,CAAC,WAAmB;IAC/C,MAAM,IAAI,MAAM,CAAA,OAAA,EAAU,MAAM,CAAA,uEAAA,CAAyE;AAC3G;AAEA,MAAM,gBAAgB,MAAM;IAC1B,IAAI,4LAAC,UAAA,CAAY,EAAA,EAAI;QACnB,qBAAqB,IAAI;IAC3B;IACA,kMAAO,UAAA,CAAY,EAAA;AACrB;AAEA,MAAM,kBAAkB,MAAM;IAC5B,IAAI,4LAAC,UAAA,CAAY,IAAA,EAAM;QACrB,qBAAqB,MAAM;IAC7B;IACA,kMAAO,UAAA,CAAY,IAAA;AACrB;AAEA,MAAM,iBAAiB,MAAM;IAC3B,IAAI,4LAAC,UAAA,CAAY,GAAA,EAAK;QACpB,qBAAqB,KAAK;IAC5B;IACA,kMAAO,UAAA,CAAY,GAAA;AACrB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///Users/jimmyheller/git/ai-productivity-tool/node_modules/%40clerk/nextjs/src/server/keyless-node.ts"],"sourcesContent":["import type { AccountlessApplication } from '@clerk/backend';\n\nimport { createClerkClientWithOptions } from './createClerkClient';\nimport { nodeCwdOrThrow, nodeFsOrThrow, nodePathOrThrow } from './fs/utils';\n\n/**\n * The Clerk-specific directory name.\n */\nconst CLERK_HIDDEN = '.clerk';\n\n/**\n * The Clerk-specific lock file that is used to mitigate multiple key creation.\n * This is automatically cleaned up.\n */\nconst CLERK_LOCK = 'clerk.lock';\n\n/**\n * The `.clerk/` directory is NOT safe to be committed as it may include sensitive information about a Clerk instance.\n * It may include an instance's secret key and the secret token for claiming that instance.\n */\nfunction updateGitignore() {\n  const { existsSync, writeFileSync, readFileSync, appendFileSync } = nodeFsOrThrow();\n\n  const path = nodePathOrThrow();\n  const cwd = nodeCwdOrThrow();\n  const gitignorePath = path.join(cwd(), '.gitignore');\n  if (!existsSync(gitignorePath)) {\n    writeFileSync(gitignorePath, '');\n  }\n\n  // Check if `.clerk/` entry exists in .gitignore\n  const gitignoreContent = readFileSync(gitignorePath, 'utf-8');\n  const COMMENT = `# clerk configuration (can include secrets)`;\n  if (!gitignoreContent.includes(CLERK_HIDDEN + '/')) {\n    appendFileSync(gitignorePath, `\\n${COMMENT}\\n/${CLERK_HIDDEN}/\\n`);\n  }\n}\n\nconst generatePath = (...slugs: string[]) => {\n  const path = nodePathOrThrow();\n  const cwd = nodeCwdOrThrow();\n  return path.join(cwd(), CLERK_HIDDEN, ...slugs);\n};\n\nconst _TEMP_DIR_NAME = '.tmp';\nconst getKeylessConfigurationPath = () => generatePath(_TEMP_DIR_NAME, 'keyless.json');\nconst getKeylessReadMePath = () => generatePath(_TEMP_DIR_NAME, 'README.md');\n\nlet isCreatingFile = false;\n\nexport function safeParseClerkFile(): AccountlessApplication | undefined {\n  const { readFileSync } = nodeFsOrThrow();\n  try {\n    const CONFIG_PATH = getKeylessConfigurationPath();\n    let fileAsString;\n    try {\n      fileAsString = readFileSync(CONFIG_PATH, { encoding: 'utf-8' }) || '{}';\n    } catch {\n      fileAsString = '{}';\n    }\n    return JSON.parse(fileAsString) as AccountlessApplication;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Using both an in-memory and file system lock seems to be the most effective solution.\n */\nconst lockFileWriting = () => {\n  const { writeFileSync } = nodeFsOrThrow();\n\n  isCreatingFile = true;\n\n  writeFileSync(\n    CLERK_LOCK,\n    // In the rare case, the file persists give the developer enough context.\n    'This file can be deleted. Please delete this file and refresh your application',\n    {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    },\n  );\n};\n\nconst unlockFileWriting = () => {\n  const { rmSync } = nodeFsOrThrow();\n\n  try {\n    rmSync(CLERK_LOCK, { force: true, recursive: true });\n  } catch {\n    // Simply ignore if the removal of the directory/file fails\n  }\n\n  isCreatingFile = false;\n};\n\nconst isFileWritingLocked = () => {\n  const { existsSync } = nodeFsOrThrow();\n  return isCreatingFile || existsSync(CLERK_LOCK);\n};\n\nasync function createOrReadKeyless(): Promise<AccountlessApplication | null> {\n  const { writeFileSync, mkdirSync } = nodeFsOrThrow();\n\n  /**\n   * If another request is already in the process of acquiring keys return early.\n   * Using both an in-memory and file system lock seems to be the most effective solution.\n   */\n  if (isFileWritingLocked()) {\n    return null;\n  }\n\n  lockFileWriting();\n\n  const CONFIG_PATH = getKeylessConfigurationPath();\n  const README_PATH = getKeylessReadMePath();\n\n  mkdirSync(generatePath(_TEMP_DIR_NAME), { recursive: true });\n  updateGitignore();\n\n  /**\n   * When the configuration file exists, always read the keys from the file\n   */\n  const envVarsMap = safeParseClerkFile();\n  if (envVarsMap?.publishableKey && envVarsMap?.secretKey) {\n    unlockFileWriting();\n\n    return envVarsMap;\n  }\n\n  /**\n   * At this step, it is safe to create new keys and store them.\n   */\n  const client = createClerkClientWithOptions({});\n  const accountlessApplication = await client.__experimental_accountlessApplications\n    .createAccountlessApplication()\n    .catch(() => null);\n\n  if (accountlessApplication) {\n    writeFileSync(CONFIG_PATH, JSON.stringify(accountlessApplication), {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    });\n\n    // TODO-KEYLESS: Add link to official documentation.\n    const README_NOTIFICATION = `\n## DO NOT COMMIT\nThis directory is auto-generated from \\`@clerk/nextjs\\` because you are running in Keyless mode. Avoid committing the \\`.clerk/\\` directory as it includes the secret key of the unclaimed instance.\n  `;\n\n    writeFileSync(README_PATH, README_NOTIFICATION, {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    });\n  }\n  /**\n   * Clean up locks.\n   */\n  unlockFileWriting();\n\n  return accountlessApplication;\n}\n\nfunction removeKeyless() {\n  const { rmSync } = nodeFsOrThrow();\n\n  /**\n   * If another request is already in the process of acquiring keys return early.\n   * Using both an in-memory and file system lock seems to be the most effective solution.\n   */\n  if (isFileWritingLocked()) {\n    return undefined;\n  }\n\n  lockFileWriting();\n\n  try {\n    rmSync(generatePath(), { force: true, recursive: true });\n  } catch {\n    // Simply ignore if the removal of the directory/file fails\n  }\n\n  /**\n   * Clean up locks.\n   */\n  unlockFileWriting();\n}\n\nexport { createOrReadKeyless, removeKeyless };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}